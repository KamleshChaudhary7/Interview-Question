1) What are collections in Java?
Answer: Collections Framework represents a hierarchy of interfaces and classes used to manipulate groups of objects.  It provides interfaces like Collection, List, Set, Queue, and Map, along with their corresponding implementations such as ArrayList, HashSet, LinkedList, and HashMap. Also Java Collections Framework refers to an object that gathers multiple elements into a single unit.
Internally, the Java Collections Framework uses primitive data structures like arrays and core data structures such as linked lists, hash tables, trees, and various other data structures to implement the different collection interfaces and classes. 

2) Collections Framework hierarchy
Answer: 
Collection: This is the root interface in the collections hierarchy. It represents a group of objects known as elements. Implementations of this interface include List, Set, and Queue.

List: This interface represents an ordered collection of elements where each element has an index. Implementations include ArrayList, LinkedList, and Vector.

Set: This interface represents a collection that contains no duplicate elements. Implementations include HashSet, LinkedHashSet, and TreeSet.

Queue: This interface represents a collection designed for holding elements prior to processing. Implementations include LinkedList and PriorityQueue.

Map: This interface represents a mapping between keys and values. Implementations include HashMap, LinkedHashMap, TreeMap, and Hashtable.

3) What is the difference between Collection and Collections in Java?
Answer: Collection is an interface that represents a single group of objects, while Collections is a utility class that provides various static methods for manipulating collections.

4) List Interface
Answer: The List interface in Java represents an ordered collection of elements where each element has an index. It allows duplicate elements and maintains the insertion order of elements. Provides methods for accessing, adding, removing, and manipulating elements by index.

5) Internally Working of ArrayList.
Answer: Ordered
ArrayList works on the principle of creating a array and adding elements to it. So basically it internally just creates and array and adds elements to it. Remember, in case of array the size of the array has to be defined during its creation.
Integer [] array = new Integer[10];

Now when we intialize ArrayList list = new ArrayList();
-- ArrayList internally uses an array to store elements. Initially, it starts with a default capacity (typically 10) and allocates an array of that size. ArrayList class has a member variable elementData which is a Object of array Object[] elementData;

Adding Elements: add(E element)
When a new element is added the capacity of the array elementData is checked and if it is completely filled that is all element 10 are filled, a new array is created with a new capacity by using Arrays.copyOf. If the elementData array is not exhausted the new element is added in the array.
So adding a element in a array may take more time as a completely new array needs to be created with greater capacity and the data in the old array is transferred into the new array.
Arrays.copyof(elementData, newCapicity);
int newCapacity = oldCapacity + (oldCapacity >> 1); // It is generally oldCapcity + 50% of oldCapcity

When using the add(int index, E element) method in an ArrayList, if the specified index is within the current size of the list, and index is vacant then element is directly added. if already element prresent at that next then the new element is inserted at the specified index,  and all subsequent elements are shifted to the right to accommodate the new element. if index more than current size then a new array is created with the index kept vacant and element insert on that index.

Accessing Elements: get(int index) Elements in the ArrayList can be accessed by their index, similar to a regular array. It directly retrieves the element from the internal array based on the index.

Key Points:
1) Manipulation can be slow due to shifting when elements are inserted or removed at specific indices.
2) ArrayList is not synchronized, so it's not thread-safe for concurrent access.
3) It may contain duplicate values and allow null elements.
4) ArrayList dynamically increases its capacity as needed.
5) Internally, it uses an array and adds elements to it.

Use: Fast access by index, Simple API for basic operations, Dynamic resizing
Not to Use: Large collections, Frequent insertions or deletions in the middle, Thread safety requirements.

5) Internally Working of Linked List.
Answer: Ordered
As opposed to ArrayList, LinkedList does not store elements in a array. Linked List is a actually a collection of objects linked together using a reference to each other. So it used a Doubly Linked List.

Each element in the LinkedList is represented by a node object. Each node contains two references:
element: Holds the data value of the node.
next: Reference to the next node in the list.
previous: Reference to the previous node in the list.

The LinkedList maintains references to the first and last nodes in the list:
first: Points to the first node (head) in the list.
last: Points to the last node (tail) in the list.

add(E e) : When adding elements to the LinkedList, new nodes are created to store the data. It check first and last node if it is null then, the first and last pointers are updated to reference the new node. If it is not null, the new node is appended to the end of the list, and the last pointer is updated to point to this new node.
add(int index, E element): method in LinkedList inserts the specified element at the specified index by adjusting the references of neighboring nodes and updating the list's size. This is not as fast as ArrayList.because it requires traversal from either the beginning or end of the list to reach the specified index.

get(int index): It iterates through the list and returns the element. This is very expensive and time consuming as opposed to ArraList.get(int index)


Key Points for Linked List:
1) Allows null entries.
2) Not synchronized for thread safety.
3) Dynamically resizable for efficient insertion and deletion.
4) Reverse traversal is inefficient.
5) Fast manipulation due to no shifting of elements.

Use:
Use linked lists when dynamic resizing and efficient insertion/deletion operations are required.
They are suitable for scenarios where elements need to be added or removed frequently.

Not to Use: 
Avoid using linked lists when random access to elements by index is a common requirement.
Linked lists are not optimal for scenarios that involve a lot of searching or accessing elements by their position in the list.
If memory overhead is a concern, linked lists may not be the best choice due to their additional memory overhead for storing node references.

6) Map Interface
Answer: Map interface, data is stored in key-value pairs, where each key is associated with a corresponding value. This association allows for efficient retrieval of values based on their keys.
Key Points for Map Interface:
1) Stores key-value pairs.
2) Does not allow duplicate keys (keys must be unique).
3) Provides efficient retrieval of values based on keys.
4) Common implementations include HashMap, TreeMap, LinkedHashMap.
5) Does not maintain insertion order (except for certain implementations like LinkedHashMap).
6) Allows null keys and null values (in most implementations).
7) Methods include put(key, value), get(key), containsKey(key), containsValue(value), remove(key), size(), isEmpty().
8) Used for various purposes such as caching, data storage, and associative arrays.

7) Internally Working of HashMap.
Answer: HashMap works on the principal of hashing. It stores values in the form of key-value pair and to access a value you need to provide the key. HashMap is basically use Singly Linked List or a binary tree (in Java 8 and later).
HashMap implementation is based on the hash table data structure. This HashMap class extends the AbstractMap class that implements the Map interface.

put(Key, Value):
HashMap has arrays of buckets. each bucket points to a Singly Linked List or a binary tree where the entries (nodes) are stored.
Internally HashMap uses a hashCode of the key Object and this hashCode is further used by the hash function to find the index of the bucket where the new entry can be added.
Once the bucket is identified by the hash function using hashcode, then hashCode is used to check if there is already a key with the same hashCode or not in the bucket.
If there already exists a key with the same hashCode, then the equals() method is used on the keys. If the equals method returns true, that means there is already a node with the same key and hence the value against that key is overwritten in the entry(node), otherwise, a new node is created and added to this Singly Linked List of that bucket.
If there is no key with the same hashCode in the bucket found by the hash function then the new Node is added to the bucket found.

get(Key):
When we fetch element first identifies the buckets in which all elements of the same hashcode stored. which is generally identified from Key. After bucket identified we just need match equals() method with Key.

The Intial size of array is 12 which is usable, 16 is capacity and 0.75 is load factor. 
Whenever the number of entries in the hashmap crosses the threshold value then the bucket size of the hashmap is doubled and rehashing is performed and all already existing entries(nodes) of the map are copied and new entries are added to this increased hashmap.
Threshold value = Bucket size * Load factor

Before java 8, singly-linked lists were used for storing the nodes. But this implementation has changed to self-balancing BST after a thresold is crossed (static final int TREEIFY_THRESHOLD = 8;). The advatange of this if we are using singly linked list and we have 100's of data in particular bucket now we are adding new element in map it and values is key unique now it need travel all the nodes in the list and add the data at last. so it time consuming which take time is O(n) for lookup. Now if we change it with BTS it will take O(log⁡n) in worst cases scenario. in this case based on the root elements we can go right side and left side for the lookup.

When the number of elements in a bucket exceeds a certain threshold (typically 8), and the size of the array is greater than a certain minimum capacity (usually 64), the bucket is transformed into a tree to improve performance for operations such as lookup, insertion, and deletion. This threshold prevents the overhead of managing a tree structure for small buckets.
Conversely, when the number of elements in a bucket falls below a certain threshold (typically 6), and the size of the array is greater than a certain minimum capacity (usually 64), the bucket is transformed back into a linked list to conserve memory and simplify operations when the number of elements decreases.

LinkedHashMap :: LinkedHashMap use a doubly linked list that preserves the insertion order of elements

7) Internally Working of TreeMap.
Answer: TreeMap is a Red-Black tree-based map implementation.
Here each node has only two child nodes and the insertion is a tree happens same as the insertion strategy of Java Binary Search Tree. The Tree Map has Key and Value in the node, while the BST only has the value.

The elements added is a TreeMap should implement comparable and provide implementation of compareTo method. On the basis of this TreeMap decides wether the node is smaller or greater than other node. If Comparable is not implemented, a class which is Comparator should be passed in the constructor of TreeMap. If both Comparable and Comparator are present TreeMap uses Comparator implementation.
TreeMap internally maintains a List of Nodes with each node being a Entry<K,V> class which is actually a implementation of Map.Entry<K,V> interface.

The basic structure of this Entry class is 
class Entry{
 K key;
 V value;
 Entry left = null;
 Entry right = null;
 Entry parent;
 boolean color = BLACK;
}

Entry<K,V> of TreeMap has internally three entries of Entry<K,V> class : left,right,parent;
When we use put(K,V) method it checks if root is pointing anywhere if no it makes the instance of Entry<K,V> and point to root.
The constructor of Entry<K,V> takes key, value and parent. In this case parent is null.
For the next time we enter something using put(K,V) it first identifies the comparison mechanism to use. First it check the Comparator class is present or not . This class is passed when creating the instance of TreeMap. If not present it uses the Key's Comparable implementation.
It then traverse through root and compares each node with the node entered and depending upon the comparison places the node either left or right of the parent node.

Key Points:
1) Sorted collection based on keys.
2) Implements SortedMap interface.
3) Uses Red-Black tree internally.
4) Provides efficient operations for sorted elements.
5) Does not allow duplicate keys.
6) Not thread-safe.
7) No null keys, but null values are allowed.

8) Internally Working of HashTable.
Answer: It's same as HashMap. use the HashTable which store the key-value pair. 
Synchronized: Thread-safe for concurrent access.
No Nulls: Doesn't allow null keys or values.
Performance: Synchronization can impact speed.
Initial Capicity: 11 LoadFactor - 0.75 Size : 8

9) Difference between WeakHashMap, IdentityHashMap, and EnumMap in Java
WeakHashMap: Uses weak references for keys, allowing them to be garbage collected if there are no strong references to them. Suitable for memory-sensitive caching.
WeakHashMap is not thread-safe and should be used in single-threaded or carefully synchronized environments
Example: 
public class WeakHashMapExample {
    public static void main(String[] args) {
        WeakHashMap<String, Integer> weakMap = new WeakHashMap<>();
        String key = new String("key");
        weakMap.put(key, 10);
        System.out.println("WeakHashMap before garbage collection: " + weakMap);
        // Let's make the key eligible for garbage collection
        key = null;
        // Trigger garbage collection
        System.gc();
        // Print the WeakHashMap after garbage collection
        System.out.println("WeakHashMap after garbage collection: " + weakMap);
    }
}
For WeakHashMap, the output may vary depending on when the garbage collector runs. If the key is collected before the map is printed, you may see an empty map or a map without the key-value pair. If the key is not collected, you'll see the map with the key-value pair intact

IdentityHashMap: Uses reference equality (identity) instead of object equality for key comparison. Allows multiple keys that are equal in terms of object equality but have different references.
Example:
public class IdentityHashMapExample {
    public static void main(String[] args) {
        IdentityHashMap<String, Integer> identityMap = new IdentityHashMap<>();
        String key1 = new String("key");
        String key2 = new String("key");

        identityMap.put(key1, 10);
        identityMap.put(key2, 20);

        System.out.println("IdentityHashMap: " + identityMap);
    }
}
Expected Output: IdentityHashMap: {key=10, key=20}

EnumMap: Specifically designed to be used with enum types as keys. Provides efficient storage and type safety for mappings from enum keys to values.
Example:

enum Color {
    RED, GREEN, BLUE
}

public class EnumMapExample {
    public static void main(String[] args) {
        EnumMap<Color, String> enumMap = new EnumMap<>(Color.class);

        enumMap.put(Color.RED, "Red");
        enumMap.put(Color.GREEN, "Green");
        enumMap.put(Color.BLUE, "Blue");

        System.out.println("EnumMap: " + enumMap);
    }
}
Expected Output: EnumMap: {RED=Red, GREEN=Green, BLUE=Blue}

10) Diffrence between ConcurrentHashMap, HashTable and synchronizedMap
ConcurrentHashMap	:
We will get thread safety without locking the total map object just with a bucket level lock.	
At a time multiple threads are allowed to operate on map objects safely.	
Read operation can be performed without lock but write operation can be performed with bucket level lock.	
While one thread iterating map objects the other thread is allowed to modify the map and won’t get ConcurrentModificationException.	
Iterator of ConcurrentHashMap is fail-safe and won’t raise ConcurrentModificationException	
Null is not allowed for both keys and values.	

HashTable:
We will get thread safety by locking the whole map object
At a time one thread is allowed to operate on a map object.
Every read and write operations required total map object 
While one thread iterating map object the other threads are not allowed to modify the map otherwise we will get ConcurrentModificationException
Iterator of HashTable is fail-fast and it will raise ConcurrentModificationException
Null is not allowed for both keys and values.

HashTable and Collections.synchronizedMap(map) has difference that synchronizedMap allows Null for both keys and values	wherever hashtable doesnot allow.

11) Set interface
Answer : 
Represents a collection of unique elements.
Does not allow duplicate elements.
Implemented by classes such as HashSet, TreeSet, and LinkedHashSet.

Hashset : Non Duplicate, Un-Ordered
Hashset is a special case
HashSet internally uses HashMap.
HashSet has a instance variable called 'map' which is a instance of HashMap.
add(E element):
When we add a value in Hashset, Hashset internally adds a value in 'map' by calling put(E,o).
where E that is the key is the element passed in add(E element) of HashSet and 'o' as the value which is a dummy Object creted by doing Object o = new Object; which is common for all key's entered in HashMap 'map'.
HashSet internally checks wether the Key that is 'element' is already present by calling the equals method of 'element'.
This method returns false if the Key is already present in HashMap.
- Not Synchronized.
- Best for search operation.

TreeSet : Non Duplicate, Sorted, Not Allow Null
Like HashSet uses HashMap internally, TreeSet uses TreeMap internally. TreeSet ensures that elements added are not duplicate and they are sorted. Sorting is done using TreeMap.
add(E element) :
When we add a value in TreeSet, TreeSet internally adds a value in 'map' by calling put(E,o);
where E that is the key is the element passed in add(E element) of TreeSetand 'o' as the value which is a dummy Object creted by doing Object o = new Object; which is common for all key's entered in TreeMap 'map'.
TreeSet internally checks wether the Key that is 'element' is already present by calling the equals method of 'element'.
This method returns false if the Key is already present in TreeMap.

LinkedHashSet : Non Duplicate, Ordered
LinkedHashSet extends HashSet that means it is a HashMap without duplicates. But the difference here with HashSet is that LinkedHashSet is ordered.
It uses a Doubly Linked List that runs through the Set holding the order together.
- Not Synchronized.

12) Comparator and Comparable
Answer: 
Comparable Interface:
The Comparable interface is used to compare different objects of a class based on some parameters or criteria. These criteria form the natural ordering for the class.

For example, consider a student class with three fields - name, GPA, and registration number. Now, let's say that we want to compare two students based on their GPA. This natural ordering of the objects based on GPA can be defined by using the Comparable interface.

To compare the objects of a class with each other, the class must implement the Comparable interface. We then need to define the compare strategy by overriding the compareTo() method. The compareTo() method returns an integer value. This value could be positive, negative, or zero based on the following conditions.

Positive if the calling object is greater.
Negative if the calling object is smaller.
0 if both are equal.

Let's continue with the Student class example and try to compare two student objects based on their GPA. We can simply return the difference in the GPA of the calling student object and the student object taken as a parameter. This will return an integer according to the above conditions. The compareTo() method for this scenario is shown below.

@Override
public int compareTo(Student other)
{
	return (int)(this.getGpa() - other.getGpa());
}

The Collections class has a sort() method which internally uses this overridden compareTo() method of the class to compare the objects and then sort them.

Comparator Interface :
The Comparator interface is also used to compare objects of a class based on some parameters. But unlike the Comparable interface, the Comparator interface can be used to create multiple classes to compare objects based on the values of different member variables.

For example, if we wish to sort an array of students based on their registration number, their GPA, and also their names, then we can create three different classes that implement the Comparator interface.

Comparable interface, on the other hand, can only create a single compareTo() method which will sort the array based on any one of the members.
Sometimes we may not have access to the original class and so we cannot create a compareTo() method according to our needs. In these cases, the Comparator interface proves to be very helpful.
To use the Comparator interface, we need to create a separate class that implements this interface. Then, we must override the compare() method of this interface in our class.
The compare() method is similar to the compareTo() method of the Comparable interface. It also returns an integer value that follows the same conditions as the compareTo() method.
Example: Comparator Interface in Java
Let's create different classes that implement the Comparator interface and override the compare() method.
Class for For Student GPA:
class CompareUsingGPA implements Comparator<Student>
{
	@Override
	public int compare(Student s1, Student s2)
	{
		return s1.getGpa() - s2.getGpa();
	}
}
The Collections.sort() can take an additional class object that has an overridden compare() method. 

Summary : Comparable and Comparator interfaces are used to compare objects of a class. The Comparable interface is used to set a natural ordering pattern for the class. The Comparator interface is used when we need multiple ways of comparing objects. Comparator is also useful when we don't have access to the original class.

13) fail-fast and fail-safe Iterator
Answer : Concurrent Modification: Concurrent Modification in programming means to modify an object concurrently when another task is already running over it. For example, in Java to modify a collection when another thread is iterating over it. Some Iterator implementations (including those of all the general purpose collection implementations provided by the JRE) may choose to throw ConcurrentModificationException if this behavior is detected.

Iterators in java are used to iterate over the Collection objects.

Fail-Fast iterators immediately throw ConcurrentModificationException if there is structural modification of the collection. Structural modification means adding, removing any element from collection while a thread is iterating over that collection. Iterator on ArrayList, HashMap classes are some examples of fail-fast Iterator.

Fail-Safe iterators don’t throw any exceptions if a collection is structurally modified while iterating over it. This is because, they operate on the clone of the collection, not on the original collection and that’s why they are called fail-safe iterators. Iterator on CopyOnWriteArrayList, ConcurrentHashMap classes are examples of fail-safe Iterator.

If you remove an element via Iterator remove() method, exception will not be thrown. However, in case of removing via a particular collection remove() method, ConcurrentModificationException will be thrown.

14) Fail-Fast Iterators internal working.
Answer: Every fail fast collection has a modCount field, to represent how many times the collection has changed/modified.
So at every modification of this collection we increment the modCount value. For example the modCount is incremented in below cases:
1. When one or more elements are removed.
2. When one or more elements are added.
3. When the collection is replaced with other collection.
4. When the collection is sorted.
So everytime there is some change in the collection structure, the mod count is incremented.

Now the iterator stores the modCount value in the initialization as below:
int expectedModCount = modCount;

Now while the iteration is going on, expectedModCount will have old value of modCount.
If there is any change made in the collection, the modCOunt will change and then an exception is thrown using:
if (modCount != expectedModCount)
    throw new ConcurrentModificationException();

This code is used in most of the iterator methods e.g.
1. next()
2. remove()
3. add()

So if we make any changes to the collection, the modCount will change, and expectedModCount will not be hence equal to the modCount. Then if we use any of the above methods of iterator, the ConcurrentModificationException will be thrown.

Note: If we remove/add the element using the remove() or add() of iterator instead of collection, then in that case no exception will opccur. It is because the remove/add methods of iterators call the remove/add method of collection internally, and also it reasigns the expectedModCount to new modCount value.

14) Iterator , ListIterator and ForEach
Answer : 
Iterator:
Can traverse elements present in Collection only in the forward direction.
Helps to traverse Map, List and Set.	
Indexes cannot be obtained by using Iterator.	
Cannot modify or replace elements present in Collection.
Cannot add elements and it throws ConcurrentModificationException.	
Certain methods of Iterator are next(), remove() and hasNext().	

ListIterator:
Can traverse elements present in Collection both in forward and backward directions.
Can only traverse List and not the other two.
It has methods like nextIndex() and previousIndex() to obtain indexes of elements at any time while traversing List.
We can modify or replace elements with the help of set(E e).Can easily add elements to a collection at any time.Certain methods of ListIterator are next(), previous(), hasNext(), hasPrevious(), add(E e).
